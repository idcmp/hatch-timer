#summary Tips on Getting the Most from the Output (work in progress)

So you've smartly placed calls of {{{TimerStackUtil.push}}}  and 
{{{TimerStackUtil.pop}}} in your code and it prints:

{{{
  [240ms] placeWigglies
    [240ms] oldPlaceWiggly
      [15ms] fetchBalance
      [188ms] createWiggly
        [4ms] fetchWigglyFriend
        [6ms] getWigglyCost
        [105ms] addWiggliesToBasket
          [72ms] addWiggly
          [33ms] addWiggly
        [5ms] findPendingWigglies
        [0ms] checkRemainingFunds
        [59ms] BasketHome: ejbCreate
          [1ms] BasketEJB.ejbCreate (non-magic portion)
          [50ms] BasketEJB.ejbPostCreate
            [49ms] wigglyHome creates
              [0ms] WigglyEJB.ejbCreate
              [18ms] WigglyEJB.ejbPostCreate
              [0ms] WigglyEJB.ejbCreate
              [20ms] WigglyEJB.ejbPostCreate
        [5ms] updateInventory
      [26ms] updateAccountBalances
      [10ms] appendAuditLogEntry
}}}

Once we're done laughing at the (obfuscated) method names, we'll need to dig in and figure out what's going on.

= So What Can We See =

You can tell very quickly that {{{placeWigglies}}} took 240ms and that _all_ of that time was spent in {{{oldPlaceWiggly}}}.  *Outcome:* Any code _in_ {{{placeWigglies}}} that _isn't_ {{{oldPlaceWiggly}}} executes in a trivial amount of time.

The duration of {{{addWiggliesToBasket}}} is the sum of both calls to {{{addWiggly}}}, so it has a negligible amount of execution time too.

The first call to {{{addWiggly}}} took quite a while, however the second one was much faster.  We'll assume this is consistent across traces.  *Outcome:* Either the second call follows separate logic, or the second call takes advantaging of priming/caching done from the first call.

Weighing in at 72ms, the first call to {{{addWiggly}}} is also the longest single element with no children.  *Outcome:* You should either add more tracing, or begin examining why it takes as long as it does.

...add more...

= So What Can We Do? =

# Nothing: Other than improving the overall performance of the {{{addWiggly}}} and {{{WigglyEJB.ejbPostCreate}}} hotspots, you may decide your code is doing well.
# Fix Hot Spots:
# Monitor for Degredation:
# Re-write: A lot of that code looks like it talks to the database.  Maybe it would be best pushed into a stored procedure if performance is really a necessity.